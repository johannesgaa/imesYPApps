"""autogenerated by genpy from youbot_motion_control/motionControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import youbot_motion_control.msg

class motionControl(genpy.Message):
  _md5sum = "b9119addd54e02bccc2ad6d2d79e3027"
  _type = "youbot_motion_control/motionControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """youbot_motion_control/joint[] joint


================================================================================
MSG: youbot_motion_control/joint
float32 position
float32 velocity
float32 acceleration 
float32 jerk

"""
  __slots__ = ['joint']
  _slot_types = ['youbot_motion_control/joint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motionControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint is None:
        self.joint = []
    else:
      self.joint = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint:
        _x = val1
        buff.write(_struct_4f.pack(_x.position, _x.velocity, _x.acceleration, _x.jerk))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.joint is None:
        self.joint = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint = []
      for i in range(0, length):
        val1 = youbot_motion_control.msg.joint()
        _x = val1
        start = end
        end += 16
        (_x.position, _x.velocity, _x.acceleration, _x.jerk,) = _struct_4f.unpack(str[start:end])
        self.joint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint:
        _x = val1
        buff.write(_struct_4f.pack(_x.position, _x.velocity, _x.acceleration, _x.jerk))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.joint is None:
        self.joint = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint = []
      for i in range(0, length):
        val1 = youbot_motion_control.msg.joint()
        _x = val1
        start = end
        end += 16
        (_x.position, _x.velocity, _x.acceleration, _x.jerk,) = _struct_4f.unpack(str[start:end])
        self.joint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
