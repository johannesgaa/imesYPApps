/* *****************************************************************
 *
 * RobotChallenge Homework
 *
 * Copyright (c) %YEAR%,
 * Institute of Mechatronic Systems,
 * Leibniz Universitaet Hannover.
 * (BSD License)
 * All rights reserved.
 *
 * http://www.imes.uni-hannover.de
 *
 * This software is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.
 *
 * For further information see http://www.linfo.org/bsdlicense.html
 *
 ******************************************************************/

/**
 * @file   %FILENAME%
 * @author %USER% (%$EMAIL%)
 * @date   %DATE%
 *
 * @brief  Filedescription
 */



#include <ros/ros.h>
#include <sensor_msgs/fill_image.h>
#include "image_transport/image_transport.h"
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <cv.h>
#include <highgui.h>



#define courseName "TemplateMatching"



cv::Mat g_template;


int ImageCallback04(const sensor_msgs::ImageConstPtr& msg)
{
    /*/
    *
    * Dieser Teil konvertiert das Image in eine Opencv Mat. Will man nicht die Webcam verwenden, sondern
    * einfache Bilder laden, kommentiert man am besten die naechsten Zeilen  aus und fuegt:
    *
    * cv::Mat frame = cv::imread("<PfadZumBild>");
    *darunter ein.
    /*/
    // first we convert the ros message to a opencv image
    cv_bridge::CvImagePtr cv_ptr;

    try
    {
        cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch( cv_bridge::Exception& e )
    {
        ROS_ERROR("cv_bridge exception: %s", e.what());
        return -1;
    }
    cv::Mat frame = cv_ptr->image.clone();

    /*/
    *
    * excercise 04: Matchen Sie das Template in das Kamerabild <frame>
    *               Umrahmen sie das beste Ergebnis und zeigen Sie das Bild an
    /*/






    return 0;

}

int ImageCallback05(const sensor_msgs::ImageConstPtr& msg)
{
    /*/
    *
    * Dieser Teil konvertiert das Image in eine Opencv Mat. Will man nicht die Webcam verwenden, sondern
    * einfache Bilder laden, kommentiert man am besten die naechsten Zeilen  aus und fuegt:
    *
    * cv::Mat frame = cv::imread("<PfadZumBild>");
    *darunter ein.
    /*/
    // first we convert the ros message to a opencv image
    cv_bridge::CvImagePtr cv_ptr;

    try
    {
        cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch( cv_bridge::Exception& e )
    {
        ROS_ERROR("cv_bridge exception: %s", e.what());
        return -1;
    }
    cv::Mat frame = cv_ptr->image.clone();

    /*/
    *
    * excercise 05: Iterieren Sie über die gedrehten Templates und Matchen Sie das Template in das Kamerabild <frame>
    *               Umrahmen sie das beste Ergebnis und zeigen Sie das Bild an
    /*/






    return 0;


}

int ImageCallback06(const sensor_msgs::ImageConstPtr& msg)
{
    /*/
    *
    * Dieser Teil konvertiert das Image in eine Opencv Mat. Will man nicht die Webcam verwenden, sondern
    * einfache Bilder laden, kommentiert man am besten die naechsten Zeilen aus und fuegt:
    *
    * cv::Mat frame = cv::imread("<PfadZumBild>");
    *darunter ein.
    /*/
    // first we convert the ros message to a opencv image
    cv_bridge::CvImagePtr cv_ptr;

    try
    {
        cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch( cv_bridge::Exception& e )
    {
        ROS_ERROR("cv_bridge exception: %s", e.what());
        return -1;
    }
    cv::Mat frame = cv_ptr->image.clone();

    /*/
    *
    * excercise 06: Führen Sie eine entsprechende Vorverarbeitung durch, um die Wuerfel kannten zu herauszustellen
    *               Führen Sie eine Hough-Line-Detektion durch
    *               Visualisieren Sie die Ergebnisse im Hough-Raum und leiten Sie einen Zusammenhang zwischen Lage und Hough-Darstellung her
    *               Gewinnen Sie daraus die Transformation
    *               Detektieren Sie den richtigen Wuerfel durch Anwendung des Template Matchings
    *               Visualisieren sie das Ergebnis
    /*/






    return 0;

}


int main(int argc, char **argv) {

    /// Init ros part
    ros::init(argc, argv, courseName);

    ros::NodeHandle 				nodeHandle;
    image_transport::ImageTransport imageTransport(nodeHandle);
    image_transport::Subscriber     imageSubscriber;

    /// subscribe the node to the usbcam topic

    /*/
    *
    * Je nach zu bearbeitende Aufgabe die entsprechende der folgenden drei dekommentieren, damit
    * die richtige Callback Methode aufgerufen wird, siehe Übungszettel.
    *
    /*/
    // imageSubscriber = imageTransport.subscribe("/usb_cam/image_raw", 1, &ImageCallback04);
    // imageSubscriber = imageTransport.subscribe("/usb_cam/image_raw", 1, &ImageCallback05);
    // imageSubscriber = imageTransport.subscribe("/usb_cam/image_raw", 1, &ImageCallback06);


    /*/
    *
    * Passen Sie die naechste Zeile an um das richtige Template zu laden !!!!!!
    *
    /*/
    g_template = cv::imread("../data/template.png");


   //spin
    while(1)
        ros::spin();

    return 0;
}


